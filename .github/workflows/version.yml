name: Update Version and Build Docker Image

on:
  push:
    branches:
      - develop

jobs:
  git-tag:
    runs-on: ubuntu-22.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      version: ${{ steps.export.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v3
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        with:
          branch: develop
          extra_plugins: |
            @semantic-release/changelog@6.0.0
            @semantic-release/git

      - name: Export Git Tag
        id: export
        if: steps.semantic.outputs.new_release_published == 'true'
        run: echo "version=${{ steps.semantic.outputs.new_release_version }}" >> "$GITHUB_OUTPUT"

  docker-build:
    runs-on: ubuntu-22.04
    needs: git-tag
    env:
      VERSION: ${{needs.git-tag.outputs.version}}
    steps:
      - run: echo "$VERSION"

      - name: Check version
        run: |
          if [[ -z "$VERSION" ]]; then
            echo "VERSION is empty"
            exit 0
          fi

      - name: Check out code
        uses: actions/checkout@v3
        with:
          submodules: true
          token: ${{ secrets.CI_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: chainmart-be
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION $ECR_REGISTRY/$ECR_REPOSITORY:lastest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:lastest
        continue-on-error: true
    outputs:
      status: ${{ steps.build-image.outcome }}

  telegram-notify:
    runs-on: ubuntu-22.04
    needs: docker-build
    steps:
      - name: Send mesage to Telegram
        if: needs.docker-build.outputs.status == 'failure'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |

            *Build Docker Image failed!*
            *Branch:* ${{ github.ref }}
            *Workflow:* ${{ github.workflow }}
            *Run number:* ${{ github.run_number }}
            *Run id:* ${{ github.run_id }}
            *Commit message:* ${{ github.event.head_commit.message }}
            *Commit url:* ${{ github.event.head_commit.url }}
            *Commit author:* ${{ github.event.head_commit.author.name }}

      - name: Send mesage to Telegram
        if: needs.docker-build.outputs.status == 'success'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |

            *Build Docker Image success!*

            *Branch:* ${{ github.ref }}
            *Workflow:* ${{ github.workflow }}
            *Run number:* ${{ github.run_number }}
            *Run id:* ${{ github.run_id }}
            *Commit message:* ${{ github.event.head_commit.message }}
            *Commit url:* ${{ github.event.head_commit.url }}
            *Commit author:* ${{ github.event.head_commit.author.name }}

  ssh-to-ec2:
    runs-on: ubuntu-22.04
    needs: docker-build
    steps:
      - name: SSH to EC2
        if: needs.docker-build.outputs.status == 'success'
        uses: appleboy/ssh-action@master
        id: ssh
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd chainmart-be
            ./deploy.sh
        continue-on-error: true

      - name: Send mesage to Telegram
        if: steps.ssh.outcome == 'failure'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |

            *SSH to EC2 failed!*
            *Branch:* ${{ github.ref }}
            *Workflow:* ${{ github.workflow }}
            *Run number:* ${{ github.run_number }}
            *Run id:* ${{ github.run_id }}
            *Commit message:* ${{ github.event.head_commit.message }}
            *Commit url:* ${{ github.event.head_commit.url }}
            *Commit author:* ${{ github.event.head_commit.author.name }}

      - name: Send mesage to Telegram
        if: steps.ssh.outcome == 'success'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |

            *SSH to EC2 success!*

            *Branch:* ${{ github.ref }}
            *Workflow:* ${{ github.workflow }}
            *Run number:* ${{ github.run_number }}
            *Run id:* ${{ github.run_id }}
            *Commit message:* ${{ github.event.head_commit.message }}
            *Commit url:* ${{ github.event.head_commit.url }}
            *Commit author:* ${{ github.event.head_commit.author.name }}
